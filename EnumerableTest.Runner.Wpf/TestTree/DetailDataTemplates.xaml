<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
    xmlns:core="clr-namespace:EnumerableTest;assembly=EnumerableTest.Core"
    xmlns:sdk="clr-namespace:EnumerableTest.Sdk;assembly=EnumerableTest.Core"
    xmlns:runner="clr-namespace:EnumerableTest.Runner;assembly=EnumerableTest.Runner"
    xmlns:model="clr-namespace:EnumerableTest.Runner.Wpf;assembly=EnumerableTest.Runner.Wpf.ViewModel"
    xmlns:local="clr-namespace:EnumerableTest.Runner.Wpf"
    >
    <!-- Nodes -->
    <DataTemplate DataType="{x:Type model:TestAssemblyNode}">
        <StackPanel>
            <TextBlock Text="{Binding Name}" />
            <Separator />
            <Label Content="{Binding TestStatistic.Value}" />
        </StackPanel>
    </DataTemplate>

    <DataTemplate DataType="{x:Type model:TestClassNode}">
        <StackPanel>
            <TextBlock Text="{Binding Name}" />
            <Separator />
            <Label Content="{Binding TestStatistic.Value}" />
        </StackPanel>
    </DataTemplate>

    <DataTemplate DataType="{x:Type model:TestMethodNode}">
        <StackPanel>
            <TextBlock Text="{Binding Name}" />
            <Separator />
            <Label Content="{Binding LastResult.Value}" />
        </StackPanel>
    </DataTemplate>

    <DataTemplate DataType="{x:Type runner:TestMethod}">
        <StackPanel>
            <Label Content="{Binding Result}" />
            <StackPanel>
                <StackPanel.Style>
                    <Style
                        TargetType="StackPanel"
                        BasedOn="{StaticResource DefaultStackPanelStyle}"
                        >
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding DisposingError}" Value="{x:Null}">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </StackPanel.Style>
                <Separator />
                <StackPanel Orientation="Horizontal">
                    <local:TestStatusMark DataContext="{x:Static model:TestStatus.Error}" />
                    <TextBlock Text="RUNTIME ERROR in Dispose" />
                </StackPanel>
                <Label Content="{Binding DisposingErrorOrNull}" />
            </StackPanel>
            <Separator />
            <TextBlock>
                Duration: <Run Text="{Binding Duration, Mode=OneTime}" />
            </TextBlock>
        </StackPanel>
    </DataTemplate>

    <!-- Tests -->
    <DataTemplate DataType="{x:Type sdk:AssertionTest}">
        <Expander>
            <Expander.Header>
                <StackPanel Orientation="Horizontal">
                    <local:TestStatusMark />
                    <TextBlock Text="{Binding Name}" />
                </StackPanel>
            </Expander.Header>
            <Expander.Style>
                <Style TargetType="Expander">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsPassed}" Value="False">
                            <Setter Property="IsExpanded" Value="True" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Expander.Style>

            <Label Content="{Binding Assertion}" />
        </Expander>
    </DataTemplate>

    <DataTemplate DataType="{x:Type sdk:GroupTest}">
        <GroupBox Header="{Binding Name}">
            <StackPanel>
                <ItemsControl ItemsSource="{Binding Tests}" />
                <StackPanel>
                    <StackPanel.Style>
                        <Style
                            TargetType="StackPanel"
                            BasedOn="{StaticResource DefaultStackPanelStyle}"
                            >
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ExceptionOrNull}" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Style>
                    <Separator />
                    <StackPanel Orientation="Horizontal">
                        <local:TestStatusMark DataContext="{x:Static model:TestStatus.Error}" />
                        <TextBlock Text="RUNTIME ERROR" />
                    </StackPanel>
                    <Label Content="{Binding ExceptionOrNull}" />
                </StackPanel>
            </StackPanel>
        </GroupBox>
    </DataTemplate>

    <!-- NotExecutedResult -->
    <DataTemplate DataType="{x:Type model:NotExecutedResult}">
        <StackPanel Orientation="Horizontal">
            <local:TestStatusMark DataContext="{x:Static model:TestStatus.NotCompleted}" />
            <StackPanel VerticalAlignment="Center">
                <TextBlock Text="This test has not completed yet." />
                <TextBlock Text="このテストの実行はまだ完了していません。" />
            </StackPanel>
        </StackPanel>
    </DataTemplate>

    <!-- TestStatistic -->
    <DataTemplate DataType="{x:Type runner:TestStatistic}">
        <StackPanel>
            <TextBlock>
                Total: <Run Text="{Binding AssertionCount.TotalCount, Mode=OneWay}" />
                / Violated: <Run Text="{Binding AssertionCount.ViolatedCount, Mode=OneWay}" />
                / Error: <Run Text="{Binding AssertionCount.ErrorCount, Mode=OneWay}" />
                / NotCompleted: <Run Text="{Binding NotCompletedTestCount, Mode=OneWay}" />
            </TextBlock>
            <TextBlock>
                Total duration: <Run Text="{Binding Duration, Mode=OneWay}" />
            </TextBlock>
        </StackPanel>
    </DataTemplate>

    <!-- Assertions-->
    <DataTemplate DataType="{x:Type sdk:TrueAssertion}">
        <TextBlock Text="Always passed." />
    </DataTemplate>

    <DataTemplate DataType="{x:Type sdk:FalseAssertion}">
        <TextBlock Text="{Binding Message}" />
    </DataTemplate>

    <DataTemplate DataType="{x:Type sdk:EqualAssertion}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <TextBlock Text="Target" Style="{StaticResource LabelTextBlockStyle}" />
            <Label Grid.Column="1" Content="{Binding Target}" />

            <TextBlock Grid.Row="1" Text="Actual" Style="{StaticResource LabelTextBlockStyle}" />
            <Label Grid.Row="1" Grid.Column="1" Content="{Binding Actual}" />

            <TextBlock Grid.Row="2" Text="Expected" Style="{StaticResource LabelTextBlockStyle}" />
            <Label Grid.Row="2" Grid.Column="1" Content="{Binding Expected}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type sdk:SelectEqualAssertion}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <TextBlock Text="Target" Style="{StaticResource LabelTextBlockStyle}" />
            <Label Grid.Column="1" Content="{Binding Target}" />

            <TextBlock Grid.Row="1" Text="Source" Style="{StaticResource LabelTextBlockStyle}" />
            <Label Grid.Row="1" Grid.Column="1" Content="{Binding Source}" />

            <TextBlock Grid.Row="2" Text="Actual" Style="{StaticResource LabelTextBlockStyle}" />
            <Label Grid.Row="2" Grid.Column="1" Content="{Binding Actual}" />

            <TextBlock Grid.Row="3" Text="Func" Style="{StaticResource LabelTextBlockStyle}" />
            <Label Grid.Row="3" Grid.Column="1" Content="{Binding Func}" />

            <TextBlock Grid.Row="4" Text="Expected" Style="{StaticResource LabelTextBlockStyle}" />
            <Label Grid.Row="4" Grid.Column="1" Content="{Binding Expected}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type sdk:CatchAssertion}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <TextBlock Text="Exception" Style="{StaticResource LabelTextBlockStyle}" />
            <Label Grid.Column="1" Content="{Binding Exception}" />
        </Grid>
    </DataTemplate>

    <!-- MarshalValue -->
    <DataTemplate DataType="{x:Type sdk:MarshalValue}">
        <Expander>
            <Expander.Header>
                <TextBlock>
                    <Run Text="{Binding String, Mode=OneTime}" />
                    :
                    <Run Text="{Binding TypeName, Mode=OneTime}" />
                </TextBlock>
            </Expander.Header>
            <Expander.Style>
                <Style TargetType="Expander">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Properties.Length}" Value="0">
                            <Setter Property="IsEnabled" Value="False" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Expander.Style>
            <DataGrid
                AutoGenerateColumns="False"
                ItemsSource="{Binding Properties}"
                >
                <DataGrid.Columns>
                    <DataGridTextColumn
                        Header="Name"
                        Binding="{Binding Name}"
                        CellStyle="{StaticResource DataGridCellStyle}"
                        IsReadOnly="True"
                        />
                    <DataGridTemplateColumn
                        Header="Value"
                        Width="*"
                        CellStyle="{StaticResource DataGridCellStyle}"
                        IsReadOnly="True"
                        >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Label Content="{Binding Value}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>
            </DataGrid>
        </Expander>
    </DataTemplate>

    <DataTemplate DataType="{x:Type sdk:MarshalResultException}">
        <Expander>
            <Expander.Header>
                <StackPanel Orientation="Horizontal">
                    <local:TestStatusMark DataContext="{x:Static model:TestStatus.Error}" />
                    <TextBlock Text="{Binding Exception.Message}" />
                </StackPanel>
            </Expander.Header>
            <Label Content="{Binding Exception}" />
        </Expander>
    </DataTemplate>

    <DataTemplate DataType="{x:Type sdk:MarshalResultValue}">
        <Label Content="{Binding MarshalValue}" />
    </DataTemplate>

    <DataTemplate DataType="{x:Type system:Exception}">
        <Border Style="{StaticResource RoundBorderStyle}">
            <TextBlock TextWrapping="Wrap" Margin="10" Text="{Binding}" />
        </Border>
    </DataTemplate>
</ResourceDictionary>
